apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ttjs.fullname" . }}
  labels:
    {{- include "ttjs.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "ttjs.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ttjs.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ttjs.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          {{- if .Values.ttnr.enabled }}
          volumeMounts:
            - name: ttnr
              mountPath: "/etc/ttjs/ttnr"
              readOnly: true
          {{- end }}
          env:
            - name: JS_JOIN_EUI
              value: {{ .Values.joinEUI | quote }}
            {{- with .Values.aws.region }}
            - name: AWS_REGION
              value: {{ . | quote }}
            {{- end }}
            {{- if not .Values.serviceAccount.create }}
            {{- with .Values.aws.secretName }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: aws_access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ . }}
                  key: aws_secret_access_key
            {{- end }}
            {{- with .Values.aws.roleArn }}
            - name: JS_AWS_ROLE_ARN
              value: {{ . | quote }}
            {{- end }}
            {{- end }}
            {{- with .Values.aws.ssmParameterPrefix }}
            - name: JS_AWS_SSM_PARAMETER_PREFIX
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.aws.appSKeysTableName }}
            - name: JS_DYNAMODB_TABLE_APPSKEYS
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.aws.devicesTableName }}
            - name: JS_DYNAMODB_TABLE_DEVICES
              value: {{ . | quote }}
            {{- end }}
            {{- if .Values.publicURLOverride }}
            - name: JS_PUBLIC_URL
              value: {{ .Values.publicURLOverride | quote }}
            {{- else if and .Values.ingress.enabled .Values.ingress.hosts }}
            {{- $scheme := (hasKey .Values.ingress "tls") | ternary "https" "http" -}}
            {{- with .Values.ingress.hosts | first }}
            - name: JS_PUBLIC_URL
              value: {{ printf "%s://%s" $scheme .host | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.ttnr.enabled }}
            - name: JS_TTNR_ENABLED
              value: "true"
            - name: "JS_TTNR_URL"
              value: {{ printf "https://%s" .Values.ttnr.address | quote }}
            - name: "JS_TTNR_ROOT_CA_FILE"
              value: "/etc/ttjs/ttnr/ca.crt"
            - name: "JS_TTNR_CERT_FILE"
              value: "/etc/ttjs/ttnr/tls.crt"
            - name: "JS_TTNR_KEY_FILE"
              value: "/etc/ttjs/ttnr/tls.key"
            {{- end }}
            {{ with .Values.features.disableNSIDCheck }}
            - name: JS_FEATURES_DISABLE_NSID_CHECK
              value: {{ . | quote }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /livez
              port: 3000
          readinessProbe:
            httpGet:
              path: /readyz
              port: 3000
          resources:
            {{- toYaml .Values.resources | nindent 12 }}            
      {{- if .Values.ttnr.enabled }}
      volumes:
        - name: ttnr
          secret:
            secretName: {{ .Values.ttnr.existingSecret | default (printf "%s-ttnr-cert" (include "ttjs.fullname" .)) | quote }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
